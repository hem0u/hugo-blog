[{"content":"因为对AI比较的感兴趣，所以打算从AI Infra（人工智能基础设施）入手，以下是我的学习路线：\n阶段 1：计算机科学与数学基础 目标 掌握编程、算法、操作系统和数学基础，为后续分布式系统和机器学习打基础。\n核心内容 第1-3天：Python基础速成\nPython（ML 主流语言）：掌握 NumPy、Pandas、多线程/多进程。 目标：能读懂PyTorch代码 只学这些： 变量/循环/函数 列表/字典/切片操作 类的基本语法（__init__, self） 资源：Python官方教程（3小时版）（跳过GUI、网络编程） C++（高性能计算）：理解内存管理、指针、STL。 推荐资源：《Effective C++》（书）、C++ Core Guidelines Bash/Shell：Linux 环境下的脚本编写。 2.数据结构与算法\n重点：哈希表、树（B+树）、图算法、动态规划。 推荐资源： 书籍：《算法导论》（CLRS） 课程：Stanford CS161: Design and Analysis of Algorithms 刷题：LeetCode（至少 200 题） 3.操作系统\n进程/线程调度、虚拟内存、文件系统、IO 模型（epoll）。 推荐资源： 书籍：《Operating Systems: Three Easy Pieces》（免费在线版） 课程：MIT 6.S081: Operating Systems Engineering（基于 RISC-V 实践） 4.计算机网络\nTCP/IP 协议栈、HTTP/2、gRPC、WebSocket。 推荐资源： 书籍：《Computer Networking: A Top-Down Approach》 课程：Stanford CS144: Introduction to Computer Networking 5.数学基础\n线性代数：矩阵分解、特征值、张量运算。 概率统计：贝叶斯定理、假设检验。 优化理论：梯度下降、凸优化。 推荐资源： 书籍：《Mathematics for Machine Learning》（剑桥大学出版） 课程：MIT 18.06: Linear Algebra 阶段 2：分布式系统与云计算 目标 掌握分布式计算、存储、调度和云原生技术，为 AI 大规模训练和部署做准备。\n核心内容 1.分布式计算框架\nMapReduce、Spark、Flink（批流一体）。 推荐资源： 书籍：《Big Data: Principles and Best Practices》 课程：UC Berkeley CS267: Distributed Systems 2.存储系统\n分布式文件系统（HDFS、S3）、数据库（PostgreSQL、MongoDB）、缓存（Redis）。 推荐资源： 书籍：《Designing Data-Intensive Applications》（DDIA，必读） 课程：CMU 15-445: Database Systems 3.资源调度与容器化\nKubernetes（K8s）、Docker、YARN。 推荐资源： 书籍：《Kubernetes in Action》 课程：Kubernetes 官方文档 4.云服务（AWS/GCP/Azure）\n学习 EC2、S3、Lambda、SageMaker（AWS）、Vertex AI（GCP）。 推荐资源： 课程：AWS Certified Machine Learning Specialty 阶段 3：机器学习与深度学习基础 目标 理解 ML/DL 核心算法，掌握 PyTorch/TensorFlow 框架。\n核心内容 1.机器学习基础\n监督/无监督学习、特征工程、模型评估。 推荐资源： 书籍：《The Elements of Statistical Learning》 课程：Andrew Ng: Machine Learning (Coursera) 2.深度学习\nCNN、RNN、Transformer、优化器（Adam、LAMB）。 推荐资源： 书籍：《Deep Learning》（花书） 课程：Fast.ai: Practical Deep Learning 3.框架实战\nPyTorch（推荐）、TensorFlow。 推荐资源： 官方教程：PyTorch Tutorials 书籍：《Deep Learning with PyTorch》 阶段 4：AI Infrastructure 核心技术 目标 掌握大规模训练、推理优化、MLOps 等 AI Infra 关键技术。\n核心内容 1.分布式训练\n数据并行（PyTorch DDP）、模型并行（Megatron-LM）、流水线并行（GPipe）。 推荐资源： 论文：《Efficient Large-Scale Language Model Training》 框架：DeepSpeed 2.模型推理优化\n量化（TensorRT）、剪枝、蒸馏。 推荐资源： 课程：NVIDIA DLI: Accelerating AI with TensorRT 3.MLOps\n特征存储（Feast）、模型监控（Evidently）、CI/CD（MLflow）。 推荐资源： 书籍：《Machine Learning Engineering》 课程：Stanford CS329S: ML Systems Design 阶段 5：前沿方向（选学） 可选方向 1.大模型 Infra\nColossalAI、vLLM、FlashAttention。 2.硬件加速\nCUDA 编程、TPU 架构。 3.Serverless ML\nAWS Lambda + SageMaker。 阶段 6：实战项目 推荐项目 使用 Kubernetes 部署分布式训练任务。 用 TensorRT 优化 ResNet 推理延迟。 复现一篇 MLSys 论文（如 《ZeRO: Memory Optimization》）。 总结 基础：编程 + 算法 + 系统。 进阶：分布式 + 云计算 + ML。 专项：训练/推理优化 + MLOps。 前沿：大模型 + 硬件加速。 保持学习的方式：\n关注 MLSys、NeurIPS、ICML 会议。 参与 开源项目（如 HuggingFace、Ray）。 订阅 AI Infra 博客（如 OpenAI Blog、DeepSpeed）。 这份路线足够详细且可执行，建议根据自身背景调整学习节奏。\n","date":"2025-04-27T18:31:21+08:00","image":"https://hem0u.github.io/hugo-blog/p/ai-infra%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/image_hu_402ecd2fb5b936a.png","permalink":"https://hem0u.github.io/hugo-blog/p/ai-infra%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/","title":"Ai Infra学习规划"},{"content":"python的环境配置 安装 python 在官网【Download Python | Python.org】进行下载，在安装时勾选Path选项 安装后可打开Windows PowerShell输入python --version进行验证，出现正确的版本号即为安装成功 pip 用于安装包与卸载包，例 pip install tqdm pip uninstall tqdm tqdm 是用于显示进度条的包，安装后可以用import tqdm调用 【e.g.】 test.py\nfrom tqdm import tqdm import time for i in tqdm(range(100)): #假设正在进行一些耗时的操作 time.sleep(0.01) pip换源\n【看】 换源的解释：\n阿里的源较稳定【 https://developer.aliyun.com/mirror/ 】 【看】 官方换源的方法：\npip config set global.index-url {source_url} #永久 pip install tqdm -i {source_url} #临时 【注】 我自己使用的方法：\n在用户文件夹下创建pip/pip.ini，写入以下内容 [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com 包的位置\n安装目录下的Scripts文件夹内 venv venv是创建虚拟环境，用与版本隔离(推荐在项目编写时使用虚拟环境) venv的基本命令\npython -m venv {vitualenv_name} #创建虚拟环境 source ./venv/bin/activate # Bash/ZSH(macOs + most Linux distro) ./venv/Scripts/activate #Windows 启动venv deactivate #退出venv VSCode的配置 vscode 官网 【Visual Studio Code - Code Editing. Redefined】 \u0026gt; 下载 vscode\nvscode \u0026gt; 扩展（extension tab) \u0026gt; 搜索python \u0026gt; 安装\n恭喜你，到这一步，已经可以运行.py文件了！🥳🥳\n基础语法 因为我的目标是学习python支持支撑AI Infra学习，所以会跳过一些内容的学习，目前只记录我学过的一些东西\n基本术语 function （函数）：“输入→处理→输出”的工具箱\narguments （参数）：函数的输入，将以某种方式影响函数的行为\n【e.g.】 hello.py\nprint(\u0026#34;hello world\u0026#34;) side effects （副作用）: 函数或表达式在执行过程中对外部环境产生的可观察的变化\n上面的例子中，在屏幕上打印hello world就是print函数的副作用\nbugs ：程序中的错误❌\nreturn values （返回值）：函数完成任务后，把数据传回给调用者\nvariables （变量）：存储某些值的容器\ncomments （注释）：执行程序时，会忽略注释中的内容；在python中通常用 # 包含注释\npseudocode （伪代码）：用人类语言（而不是编程语法）描述的代码逻辑\n控制流工具 if 语句 x = int(input(\u0026#34;Please enter an integer: \u0026#34;)) if x \u0026lt; 0: x = 0 print(\u0026#39;Negative changed to zero\u0026#39;) elif x == 0: print(\u0026#39;Zero\u0026#39;) elif x == 1: print(\u0026#39;Single\u0026#39;) else: print(\u0026#39;More\u0026#39;) 可有零个或多个 elif 部分，else 部分也是可选的。elif 是else if的缩写，这一点与C++不同\nfor语句 Python上的for语句与C中的for也有很大不同，列表或字符串等任意序列的元素上迭代，按它们在序列中出现的顺序。 例如：\n# 度量一些字符串： words = [\u0026#39;cat\u0026#39;, \u0026#39;window\u0026#39;, \u0026#39;defenestrate\u0026#39;] for w in words: print(w, len(w)) 很难正确地在迭代多项集的同时修改多项集的内容。更简单的方法是迭代多项集的副本或者创建新的多项集：\n# 创建示例多项集 users = {\u0026#39;Hans\u0026#39;: \u0026#39;active\u0026#39;, \u0026#39;Éléonore\u0026#39;: \u0026#39;inactive\u0026#39;, \u0026#39;景太郎\u0026#39;: \u0026#39;active\u0026#39;} # 策略：迭代一个副本 for user, status in users.copy().items(): if status == \u0026#39;inactive\u0026#39;: del users[user] # 策略：创建一个新多项集 active_users = {} for user, status in users.items(): if status == \u0026#39;active\u0026#39;: active_users[user] = status range() 函数 内置函数 range() 用于生成等差数列：\nfor i in range(5): print(i) 生成的序列绝不会包括给定的终止值；range(10) 生成 10 个值——长度为 10 的序列的所有合法索引。range 可以不从 0 开始，且可以按给定的步长递增（即使是负数步长）：\nlist(range(5, 10)) list(range(0, 10, 3)) list(range(-10, -100, -30)) 要按索引迭代序列，可以组合使用 range() 和 len()：\na = [\u0026#39;Mary\u0026#39;, \u0026#39;had\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;little\u0026#39;, \u0026#39;lamb\u0026#39;] for i in range(len(a)): print(i, a[i]) 不过大多数情况下 enumerate() 函数很方便，详见 循环的技巧。\n如果直接打印一个 range 会发生意想不到的事情：\nrange(10) range() 返回的对象在很多方面和列表的行为一样，但其实它和列表不一样。该对象只有在被迭代时才一个一个地返回所期望的列表项，并没有真正生成过一个含有全部项的列表，从而节省了空间。\n这种对象称为可迭代对象 iterable，适合作为需要获取一系列值的函数或程序构件的参数。for 语句就是这样的程序构件；以可迭代对象作为参数的函数例如 sum()：\nsum(range(4)) # 0 + 1 + 2 + 3 参考资料\nPython 教程 — Python 3.13.3 文档\n","date":"2025-04-26T15:40:47+08:00","image":"https://hem0u.github.io/hugo-blog/p/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image_hu_4e3d22aee7ecd153.png","permalink":"https://hem0u.github.io/hugo-blog/p/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Python学习笔记"},{"content":"","date":"2025-04-25T17:32:44+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/test/","title":"Test"},{"content":"Hello World 你好\n","date":"2025-04-25T15:54:09+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/myfirstblog/","title":"MyFirstBlog"}]