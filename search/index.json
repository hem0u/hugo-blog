[{"content":"Technical Selection Since there are more parts that I want to design myself, the tech stack is HTML, CSS, and JavaScript, and I\u0026rsquo;m going to rub a personal website out myself\n这篇文章记录一切在我搭建个人网站时所需要使用的知识，和实现过程\n前期准备 编程软件 我选择的软件为vscode，详细的安装和配置可以参考这个文章（这是一个跳转链接）\n以下为我安装的几个插件：\nAuto Rename Tag：在你修改开始标签时，自动将结束标签修改为与开始标签一致的插件\nLive Server：右键html文件，选择Open with Live Server 打开一个实时预览文件效果的网页\n字体、主题色的选择 字体\n在搭建我们的网站前，可以选择一个喜欢的字体，作为我们网站的主要字体\n我选择的字体为阿里巴巴惠普体，这是一个免费的可商用字体\n主题色\n可以在colorhunt这个网站中，选择喜欢的颜色搭配，作为我们网站的主题色\n这是我选择的主题色，可供参考\n学习三大件 因为虽然之前学过一些有关三大件（HTML、CSS、JavaScript）的基础知识，但是已经忘记的差不多了，所以决定从头学起，以下是我学习的一些资料：\n官方学习文档\n3小时前端入门教程（HTML+CSS+JS）\n","date":"2025-05-02T21:06:13+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/personal-website-construction/","title":"Personal website construction"},{"content":"因为对AI比较的感兴趣，所以打算从AI Infra（人工智能基础设施）入手，以下是我的学习路线：\n学习总纲 阶段 时间 核心目标 关键成果 基础筑基 1-2个月 掌握Python、Linux、数学基础 能实现高效数据预处理，理解分布式训练基本概念 核心突破 4-5个月 深入分布式训练、模型部署、编译器技术 完成混合并行训练项目，模型推理延迟降低50%+ 系统进阶 2-3个月 构建云原生AI系统 设计端到端训练平台，贡献开源社区 求职冲刺 1个月 简历优化与面试准备 产出2个高质量项目，通过模拟面试 分阶段详细规划 阶段1：基础筑基 目标：建立Python编程能力与系统基础，跳过冗余内容\n模块 学习内容 推荐资料 任务/项目 Python编程 基础语法、函数/类、NumPy/Pandas、多进程 - 书籍：《Python编程：从入门到实践（第2版）》第1-11章 - 实战：PyTorch官方Quickstart 用多进程加速CSV数据清洗（对比单进程速度） Linux系统 文件操作、进程管理、Shell脚本、Docker - 课程：Linux命令行基础（MIT Missing Semester） 用Docker打包PyTorch训练镜像（含CUDA 11.7） 数学基础 矩阵运算、梯度计算、概率分布 - 视频：3Blue1Brown线性代数 用NumPy实现梯度下降法求解线性回归 ","date":"2025-04-27T18:31:21+08:00","image":"https://hem0u.github.io/hugo-blog/p/ai-infra%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/image_hu_402ecd2fb5b936a.png","permalink":"https://hem0u.github.io/hugo-blog/p/ai-infra%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/","title":"Ai Infra学习规划"},{"content":"python的环境配置 安装 python 在官网【Download Python | Python.org】进行下载，在安装时勾选Path选项 安装后可打开Windows PowerShell输入python --version进行验证，出现正确的版本号即为安装成功 pip 用于安装包与卸载包，例 pip install tqdm pip uninstall tqdm tqdm 是用于显示进度条的包，安装后可以用import tqdm调用 【e.g.】 test.py\nfrom tqdm import tqdm import time for i in tqdm(range(100)): #假设正在进行一些耗时的操作 time.sleep(0.01) pip换源\n【看】 换源的解释：\n阿里的源较稳定【 https://developer.aliyun.com/mirror/ 】 【看】 官方换源的方法：\npip config set global.index-url {source_url} #永久 pip install tqdm -i {source_url} #临时 【注】 我自己使用的方法：\n在用户文件夹下创建pip/pip.ini，写入以下内容 [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com 包的位置\n安装目录下的Scripts文件夹内 venv venv是创建虚拟环境，用与版本隔离(推荐在项目编写时使用虚拟环境) venv的基本命令\npython -m venv {vitualenv_name} #创建虚拟环境 source ./venv/bin/activate # Bash/ZSH(macOs + most Linux distro) ./venv/Scripts/activate #Windows 启动venv deactivate #退出venv VSCode的配置 vscode 官网 【Visual Studio Code - Code Editing. Redefined】 \u0026gt; 下载 vscode\nvscode \u0026gt; 扩展（extension tab) \u0026gt; 搜索python \u0026gt; 安装\n恭喜你，到这一步，已经可以运行.py文件了！🥳🥳\n基本术语 function （函数）：“输入→处理→输出”的工具箱\narguments （参数）：函数的输入，将以某种方式影响函数的行为\n【e.g.】 hello.py\nprint(\u0026#34;hello world\u0026#34;) side effects （副作用）: 函数或表达式在执行过程中对外部环境产生的可观察的变化\n上面的例子中，在屏幕上打印hello world就是print函数的副作用\nbugs ：程序中的错误❌\nreturn values （返回值）：函数完成任务后，把数据传回给调用者\nvariables （变量）：存储某些值的容器\ncomments （注释）：执行程序时，会忽略注释中的内容；在python中通常用 # 包含注释\npseudocode （伪代码）：用人类语言（而不是编程语法）描述的代码逻辑\n变量和简单数据类型 变量 变量 是一个可以被赋值的标签，变量指向特定的值，在程序中可随时修改变量的值，而Python始终记录变量的最新值\n【例】 hello_world.py\nmessage = \u0026#34;Hello, World!\u0026#34; print(message) message = \u0026#34;Hello, Python World!\u0026#34; print(message) 变量的命名和使用 在Python中使用变量时，需要遵守一些规则并做到见名知意。违反这些规则将引发错误，而好的名字可以提高代码的可阅读性\n变量名只能包含字母、数字和下划线。变量名能以字母或下划线打头，但不能以数字打头。例如，可将变量命名为message_1，但不能将其命名为1_message\n变量名不能包含空格，但能使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误\n不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print（请参见附录A.4）\n变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好\n慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0\n注意 就目前而言，用小写的变量名即可\n字符串 字符串 就是一系列字符。在Python中，用引号引起的都是字符串，其中的引号可以是单引号也可以是双引号\n这种灵活性可以让你能够在字符串中包含引号和撇号\nprint(\u0026#39;\u0026#34;Python\u0026#34; is a programming language\u0026#39;) print(\u0026#34;\u0026#39;Python\u0026#39; is a programming language\u0026#34;) print(\u0026#34;Python\u0026#39;s syntax is easy to learn\u0026#34;) 使用方法修改字符串的大小写 对于字符串而言，可执行的最简单的操作之一是修改其中字母的大小写\nname = \u0026#34;david baker\u0026#34; print(name.title()) #David Baker 在这个示例中，变量name指向小写的字符串“david baker”。在函数调用print()中，方法title()出现在这个变量后。方法 是Python可对数据执行的操作。在name.title()中，name后面的句点（ . ）让Python对变量name执行方法title()指定的操作。每个方法后面都跟着一对圆括号，这是因为方法通常需要额外的信息来完成其工工作。这种信息是在圆括号内提供的。函数title()不需要额外的信息，因此它后面的圆括号是空的\n方法title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。这很有用，因为你经常需要将名字视为信息。例如，你可能希望程序将值Ada、ADA和ada视为同一个名字，并将它们都显示为Ada\n还有其他几个很有用的大小写处理方法。例如，要将字符串改为全部大写或全部小写，可以像下面这样做：\nname = \u0026#34;David Baker\u0026#34; print(name.upper()) #DAVID BAKER print(name.lower()) #david baker 存储数据时，方法lower()很有用。很多时候，你无法依靠用户来提供正确的大小写，因此需要将字符串先转换为小写，再存储它们。以后需要显示这些信息时，再将其转换为最合适的大小写方式\n在字符串中使用变量 在有些情况下，你可能想在字符串中使用变量的值。例如，你可能想使用两个变量分别表示名和姓，然后合并这两个值以显示姓名：\nfirst_name = \u0026#34;john\u0026#34; last_name = \u0026#34;doe\u0026#34; full_name = f\u0026#34;{first_name} {last_name}\u0026#34; print(full_name) “要在字符串中插入变量的值，可在前引号前加上字母f（见❶），再将要插入的变量放在花括号内。这样，当Python显示字符串时，将把每个变量都替换为其值。\n这种字符串名为f字符串 。f是format（设置格式）的简写，因为Python通过把花括号内的变量替换为其值来设置字符串的格式\n使用f字符串可完成很多任务，如利用与变量关联的信息来创建完整的消息，如下所示：\nfirst_name = \u0026#34;john\u0026#34; last_name = \u0026#34;doe\u0026#34; full_name = f\u0026#34;{first_name} {last_name}\u0026#34; print(f\u0026#34;Hello, {full_name.title()}!\u0026#34;) 使用制表符或换行符来添加空白 在编程中，空白泛指任何非打印字符，如空格 、制表符 和换行符 。可以使用空白来组织输出，让用户阅读起来更容易\n要在字符串中添加制表符，可使用字符组合\\t，如下述代码的所示：\nprint(\u0026#34;Python\u0026#34;) print(\u0026#34;\\tPython\u0026#34;) 要在字符串中添加换行符，可以使用字符组合\\n:\nprint(\u0026#34;Language:\\nPython\\nC++\\nJava\u0026#34;) 删除空白 空白很重要，因为你经常需要比较两个字符串是否相同。一个重要的示例是，在用户登录网站时检查其用户名。不过在非常简单的情形下，额外的空格也可能令人迷惑。所幸，在Python中删除用户输入数据中的多余空白易如反掌\nPython能够找出字符串开头和末尾多余的空白。要确保字符串末尾没有空白，可使用方法rstrip()\nfavorite_language = \u0026#34;Python \u0026#34; print(f\u0026#34;\u0026#39;{favorite_language}\u0026#39;\u0026#34;) #\u0026#39;Python \u0026#39; print(f\u0026#34;\u0026#39;{favorite_language.rstrip()}\u0026#39;\u0026#34;) #\u0026#39;Python\u0026#39; 你还可以剔除字符串开头的空白，或者同时剔除字符串两边的空白。为此，可分别使用方法lstrip() 和strip() ：\nfavorite_language = \u0026#39; python \u0026#39; print(favorite_language.rstrip()) # \u0026#39; python\u0026#39; print(favorite_language.lstrip()) # \u0026#39;python \u0026#39; print(favorite_language.strip()) # \u0026#39;python\u0026#39; 在实际程序中，这些剥除函数最常用于在存储用户输入前对其进行清理\n使用字符串时避免语法错误 语法错误 是一种你时不时会遇到的错误。程序中包含非法的Python代码时，就会导致语法错误。例如，在用单引号括起的字符串中，如果包含撇号，就将导致错误。这是因为这会导致Python将第一个单引号和撇号之间的内容视为一个字符串，进而将余下的文本视为Python代码，从而引发错误\n注意 编写程序时，编辑器的语法高亮功能可帮助你快速找出某些语法错误。看到Python代码以普通句子的颜色显示，或者普通句子以Python代码的颜色显示时，就可能意味着文件中存在引号不匹配的情况\n数 在编程中，经常使用数来记录得分、表示可视化数据、存储Web应用信息，等等。Python能根据数的用法以不同的方式处理它们\n整数 在Python中，可对整数执行加（+ ）减（- ）乘（* ）除（/ ）运算。\nprint(2 + 3) #5 print(3 - 2) #1 print(2 * 3) #6 print(3 / 2) #1.5 在终端会话中，Python直接返回运算结果。Python使用两个乘号表示乘方运算：\nprint(3 ** 2) # 9 print(3 ** 3) # 27 print(10 ** 6) # 1000000 如果想改变运算次序，可以使用()，被括号括起来的运算为最优先\n浮点数 Python将所有带小数点的数称为浮点数\n从很大程度上说，使用浮点数时无须考虑其行为。你只需输入要使用的数，Python通常会按你期望的方式处理它们：\nprint(0.1 * 4) # 0.4 print(0.2 + 0.2) # 0.4 但需要注意的是，结果包含的小数位数可能是不确定的：\nprint(0.1 * 3) # 0.30000000000000004 print(0.2 + 0.1) # 0.30000000000000004 所有语言都存在这种问题，Python会尽力找到一种精确表示结果的方法，但鉴于计算机内部表示数的方式，这在有些情况下很难。就现在而言，暂时忽略多余的小数位数即可\n整数和浮点数 将任意两个数相除时，结果总是浮点数，即便这两个数都是整数且能整除：\nprint(4 / 2) #2.0 在其他任何运算中，如果一个操作数是整数，另一个操作数是浮点数，结果也总是浮点数：\nprint(1 + 2.0) # 3.0 print(2 * 3.0) # 6.0 print(3.0 ** 2) # 9.0 无论是哪种运算，只要有操作数是浮点数，Python默认得到的总是浮点数，即便结果原本为整数也是如此\n数中的下划线 书写很大的数时，可使用下划线将其中的数字分组，使其更清晰易读：\nuniverse_age = 14_000_000_000 当你打印这种使用下划线定义的数时，Python不会打印其中的下划线：\nuniverse_age = 14_000_000_000 print(universe_age) # 14000000000 这是因为存储这种数时，Python会忽略其中的下划线。将数字分组时，即便不是将每三位分成一组，也不会影响最终的值。在Python看来，1000 与1_000 没什么不同，1_000 与10_00 也没什么不同。这种表示法适用于整数和浮点数，但只有Python 3.6和更高的版本支持\n同时给多个变量赋值 可在一行代码中给多个变量赋值，这有助于缩短程序并提高其可读性。这种做法最常用于将一系列数赋给一组变量\n例如，下面演示了如何将变量x 、y 和z 都初始化为零：\nx, y, z = 0, 0, 0 这样做时，需要用逗号将变量名分开；对于要赋给变量的值，也需同样处理。Python将按顺序将每个值赋给对应的变量。只要变量和值的个数相同，Python就能正确地将它们关联起来\n常量 常量 类似于变量，但其值在程序的整个生命周期内保持不变。Python没有内置的常量类型，但Python程序员会使用全大写来指出应将某个变量视为常量，其值应始终不变：\nMAX_CONNECTIONS = 5000 在代码中，要指出应将特定的变量视为常量，可将其字母全部大写\n注释 在大多数编程语言中，注释是一项很有用的功能。随着程序越来越大、越来越复杂，就应在其中添加说明，对解决问题的方法进行大致的阐述。注释 让你能够使用自然语言在程序中添加说明\n如何编写注释 在Python中，注释用井号（# ）标识。井号后面的内容都会被Python解释器忽略，如下所示：\n# 向大家问好。 print(\u0026#34;Hello Python people!\u0026#34;) #Hello Python people! Python解释器将忽略第一行，只执行第二行\n该编写什么样的注释 编写注释的主要目的是阐述代码要做什么，以及是如何做的。虽然可以通过研究代码来确定各个部分的工作原理，但通过编写注释以清晰的自然语言对解决方案进行概述，可节省很多时间\n要成为专业程序员或与其他程序员合作，就必须编写有意义的注释。当前，大多数软件是合作编写的，编写者可能是同一家公司的多名员工，也可能是众多致力于同一个开源项目的人员。训练有素的程序员都希望代码中包含注释\nPython之禅 经验丰富的程序员倡导尽可能避繁就简。Python社区的理念都包含在Tim Peters撰写的“Python之禅”中。要获悉这些有关编写优秀Python代码的指导原则，只需在解释器中执行命令import this 。这里不打算赘述整个“Python之禅”，而只分享其中的几条原则\nimport this #The Zen of Python, by Tim Peters #Beautiful is better than ugly. Python程序员笃信代码可以编写得漂亮而优雅。编程是要解决问题的，设计良好、高效而漂亮的解决方案都会让程序员心生敬意\n#Simple is better than complex. 如果有两个解决方案，一个简单、一个复杂，但都行之有效，就选择简单的解决方案吧。这样，你编写的代码将更容易维护，你或他人以后改进这些代码时也会更容易\n#Complex is better than complicated. 现实是复杂的，有时候可能没有简单的解决方案。在这种情况下，就选择最简单可行的解决方案吧\n#Readability counts. 即便是复杂的代码，也要让它易于理解。开发的项目涉及复杂代码时，一定要为这些代码编写有益的注释\n#There should be one-- and preferably only one --obvious way to do it. 如果让两名Python程序员去解决同一个问题，他们提供的解决方案应大致相同。这并不是说编程没有创意空间，而是恰恰相反！然而，大部分编程工作是使用常见解决方案来解决简单的小问题，但这些小问题都包含在更庞大、更有创意空间的项目中。在你的程序中，各种具体细节对其他Python程序员来说都应易于理解\n#Now is better than never. 你可以用余生来学习Python和编程的纷繁难懂之处，但这样你什么项目都完不成。不要企图编写完美无缺的代码，而是要先编写行之有效的代码，再决定是对其做进一步改进，还是转而去编写新代码。\n小结 在本章中，学习了：如何使用变量；如何创建描述性变量名以及如何消除名称错误和语法错误；字符串是什么，以及如何使用小写、大写和首字母大写方式显示字符串；使用空白来显示整洁的输出，以及如何剔除字符串中多余的空白；如何使用整数和浮点数；一些使用数值数据的方式。还学习了如何编写说明性注释，让代码对你和其他人来说更容易理解。最后，了解了让代码尽可能简单的理念。\nPython 教程 — Python 3.13.3 文档\nCS50\u0026rsquo;s Introduction to Programming with Python\n《Python编程：从入门到实践（第2版）》第1-11章\n","date":"2025-04-26T15:40:47+08:00","image":"https://hem0u.github.io/hugo-blog/p/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image_hu_4e3d22aee7ecd153.png","permalink":"https://hem0u.github.io/hugo-blog/p/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Python学习笔记"},{"content":"","date":"2025-04-25T17:32:44+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/test/","title":"Test"},{"content":"Hello World 你好\n","date":"2025-04-25T15:54:09+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/myfirstblog/","title":"MyFirstBlog"}]