[{"content":"Technical Selection Since there are more parts that I want to design myself, the tech stack is HTML, CSS, and JavaScript, and I\u0026rsquo;m going to rub a personal website out myself\n这篇文章记录一切在我搭建个人网站时所需要使用的知识，和实现过程\n前期准备 编程软件 我选择的软件为vscode，详细的安装和配置可以参考这个文章（这是一个跳转链接）\n以下为我安装的几个插件：\nAuto Rename Tag：在你修改开始标签时，自动将结束标签修改为与开始标签一致的插件\nLive Server：右键html文件，选择Open with Live Server 打开一个实时预览文件效果的网页\n字体、主题色的选择 字体\n在搭建我们的网站前，可以选择一个喜欢的字体，作为我们网站的主要字体\n我选择的字体为阿里巴巴惠普体，这是一个免费的可商用字体\n主题色\n可以在colorhunt这个网站中，选择喜欢的颜色搭配，作为我们网站的主题色\n这是我选择的主题色，可供参考\n学习三大件 因为虽然之前学过一些有关三大件（HTML、CSS、JavaScript）的基础知识，但是已经忘记的差不多了，所以决定从头学起，以下是我学习的一些资料：\n官方学习文档\n3小时前端入门教程（HTML+CSS+JS）\n","date":"2025-05-02T21:06:13+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/personal-website-construction/","title":"Personal website construction"},{"content":"因为对AI比较的感兴趣，所以打算从AI Infra（人工智能基础设施）入手，以下是我的学习路线：\n一、学习总纲（总时长：8-10个月） 阶段 时间 核心目标 关键成果 基础筑基 1-2个月 掌握Python、Linux、数学基础 能实现高效数据预处理，理解分布式训练基本概念 核心突破 4-5个月 深入分布式训练、模型部署、编译器技术 完成混合并行训练项目，模型推理延迟降低50%+ 系统进阶 2-3个月 构建云原生AI系统 设计端到端训练平台，贡献开源社区 求职冲刺 1个月 简历优化与面试准备 产出2个高质量项目，通过模拟面试 二、分阶段详细规划 阶段1：基础筑基（1-2个月） 目标：建立Python编程能力与系统基础，跳过冗余内容\n模块 学习内容 推荐资料 任务/项目 Python编程 基础语法、函数/类、NumPy/Pandas、多进程 - 书籍：《Python编程：从入门到实践（第2版）》第1-11章 - 实战：PyTorch官方Quickstart 用多进程加速CSV数据清洗（对比单进程速度） Linux系统 文件操作、进程管理、Shell脚本、Docker - 课程：Linux命令行基础（MIT Missing Semester） 用Docker打包PyTorch训练镜像（含CUDA 11.7） 数学基础 矩阵运算、梯度计算、概率分布 - 视频：3Blue1Brown线性代数 用NumPy实现梯度下降法求解线性回归 ","date":"2025-04-27T18:31:21+08:00","image":"https://hem0u.github.io/hugo-blog/p/ai-infra%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/image_hu_402ecd2fb5b936a.png","permalink":"https://hem0u.github.io/hugo-blog/p/ai-infra%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/","title":"Ai Infra学习规划"},{"content":"python的环境配置 安装 python 在官网【Download Python | Python.org】进行下载，在安装时勾选Path选项 安装后可打开Windows PowerShell输入python --version进行验证，出现正确的版本号即为安装成功 pip 用于安装包与卸载包，例 pip install tqdm pip uninstall tqdm tqdm 是用于显示进度条的包，安装后可以用import tqdm调用 【e.g.】 test.py\nfrom tqdm import tqdm import time for i in tqdm(range(100)): #假设正在进行一些耗时的操作 time.sleep(0.01) pip换源\n【看】 换源的解释：\n阿里的源较稳定【 https://developer.aliyun.com/mirror/ 】 【看】 官方换源的方法：\npip config set global.index-url {source_url} #永久 pip install tqdm -i {source_url} #临时 【注】 我自己使用的方法：\n在用户文件夹下创建pip/pip.ini，写入以下内容 [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com 包的位置\n安装目录下的Scripts文件夹内 venv venv是创建虚拟环境，用与版本隔离(推荐在项目编写时使用虚拟环境) venv的基本命令\npython -m venv {vitualenv_name} #创建虚拟环境 source ./venv/bin/activate # Bash/ZSH(macOs + most Linux distro) ./venv/Scripts/activate #Windows 启动venv deactivate #退出venv VSCode的配置 vscode 官网 【Visual Studio Code - Code Editing. Redefined】 \u0026gt; 下载 vscode\nvscode \u0026gt; 扩展（extension tab) \u0026gt; 搜索python \u0026gt; 安装\n恭喜你，到这一步，已经可以运行.py文件了！🥳🥳\n基本术语 function （函数）：“输入→处理→输出”的工具箱\narguments （参数）：函数的输入，将以某种方式影响函数的行为\n【e.g.】 hello.py\nprint(\u0026#34;hello world\u0026#34;) side effects （副作用）: 函数或表达式在执行过程中对外部环境产生的可观察的变化\n上面的例子中，在屏幕上打印hello world就是print函数的副作用\nbugs ：程序中的错误❌\nreturn values （返回值）：函数完成任务后，把数据传回给调用者\nvariables （变量）：存储某些值的容器\ncomments （注释）：执行程序时，会忽略注释中的内容；在python中通常用 # 包含注释\npseudocode （伪代码）：用人类语言（而不是编程语法）描述的代码逻辑\n变量和简单数据类型 变量 变量 是一个可以被赋值的标签，变量指向特定的值，在程序中可随时修改变量的值，而Python始终记录变量的最新值\n【例】 hello_world.py\nmessage = \u0026#34;Hello, World!\u0026#34; print(message) message = \u0026#34;Hello, Python World!\u0026#34; print(message) 变量的命名和使用 在Python中使用变量时，需要遵守一些规则并做到见名知意。违反这些规则将引发错误，而好的名字可以提高代码的可阅读性\n变量名只能包含字母、数字和下划线。变量名能以字母或下划线打头，但不能以数字打头。例如，可将变量命名为message_1，但不能将其命名为1_message\n变量名不能包含空格，但能使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误\n不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print（请参见附录A.4）\n变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好\n慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0\n注意 就目前而言，用小写的变量名即可\n字符串 字符串 就是一系列字符。在Python中，用引号引起的都是字符串，其中的引号可以是单引号也可以是双引号\n这种灵活性可以让你能够在字符串中包含引号和撇号\nprint(\u0026#39;\u0026#34;Python\u0026#34; is a programming language\u0026#39;) print(\u0026#34;\u0026#39;Python\u0026#39; is a programming language\u0026#34;) print(\u0026#34;Python\u0026#39;s syntax is easy to learn\u0026#34;) 使用方法修改字符串的大小写 对于字符串而言，可执行的最简单的操作之一是修改其中字母的大小写\nname = \u0026#34;david baker\u0026#34; print(name.title()) #David Baker 在这个示例中，变量name指向小写的字符串“david baker”。在函数调用print()中，方法title() 出现在这个变量后。方法 是Python可对数据执行的操作。在name.title() 中，name后面的句点（ . ）让Python对变量name执行方法title()指定的操作。每个方法后面都跟着一对圆括号，这是因为方法通常需要额外的信息来完成其工工作。这种信息是在圆括号内提供的。函数title()不需要额外的信息，因此它后面的圆括号是空的\n方法title() 以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。这很有用，因为你经常需要将名字视为信息。例如，你可能希望程序将值Ada、ADA和ada视为同一个名字，并将它们都显示为Ada\n还有其他几个很有用的大小写处理方法。例如，要将字符串改为全部大写或全部小写，可以像下面这样做：\nname = \u0026#34;David Baker\u0026#34; print(name.upper()) #DAVID BAKER print(name.lower()) #david baker 存储数据时，方法lower()很有用。很多时候，你无法依靠用户来提供正确的大小写，因此需要将字符串先转换为小写，再存储它们。以后需要显示这些信息时，再将其转换为最合适的大小写方式\n在字符串中使用变量 在有些情况下，你可能想在字符串中使用变量的值。例如，你可能想使用两个变量分别表示名和姓，然后合并这两个值以显示姓名：\nfirst_name = \u0026#34;john\u0026#34; last_name = \u0026#34;doe\u0026#34; full_name = f\u0026#34;{first_name} {last_name}\u0026#34; print(full_name) “要在字符串中插入变量的值，可在前引号前加上字母f（见❶），再将要插入的变量放在花括号内。这样，当Python显示字符串时，将把每个变量都替换为其值。\n这种字符串名为f字符串 。f是format（设置格式）的简写，因为Python通过把花括号内的变量替换为其值来设置字符串的格式\n使用f字符串可完成很多任务，如利用与变量关联的信息来创建完整的消息，如下所示：\nfirst_name = \u0026#34;john\u0026#34; last_name = \u0026#34;doe\u0026#34; full_name = f\u0026#34;{first_name} {last_name}\u0026#34; print(f\u0026#34;Hello, {full_name.title()}!\u0026#34;) 使用制表符或换行符来添加空白 参考资料\nPython 教程 — Python 3.13.3 文档\nCS50\u0026rsquo;s Introduction to Programming with Python\n","date":"2025-04-26T15:40:47+08:00","image":"https://hem0u.github.io/hugo-blog/p/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image_hu_4e3d22aee7ecd153.png","permalink":"https://hem0u.github.io/hugo-blog/p/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Python学习笔记"},{"content":"","date":"2025-04-25T17:32:44+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/test/","title":"Test"},{"content":"Hello World 你好\n","date":"2025-04-25T15:54:09+08:00","permalink":"https://hem0u.github.io/hugo-blog/p/myfirstblog/","title":"MyFirstBlog"}]